// Code generated by MockGen. DO NOT EDIT.
// Source: events.go
//
// Generated by this command:
//
//	mockgen --source events.go --destination mocks.go --package manager
//

// Package manager is a generated GoMock package.
package manager

import (
	context "context"
	reflect "reflect"

	models "github.com/bacalhau-project/bacalhau/pkg/models"
	gomock "go.uber.org/mock/gomock"
)

// MockNodeEventHandler is a mock of NodeEventHandler interface.
type MockNodeEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockNodeEventHandlerMockRecorder
}

// MockNodeEventHandlerMockRecorder is the mock recorder for MockNodeEventHandler.
type MockNodeEventHandlerMockRecorder struct {
	mock *MockNodeEventHandler
}

// NewMockNodeEventHandler creates a new mock instance.
func NewMockNodeEventHandler(ctrl *gomock.Controller) *MockNodeEventHandler {
	mock := &MockNodeEventHandler{ctrl: ctrl}
	mock.recorder = &MockNodeEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeEventHandler) EXPECT() *MockNodeEventHandlerMockRecorder {
	return m.recorder
}

// HandleNodeEvent mocks base method.
func (m *MockNodeEventHandler) HandleNodeEvent(ctx context.Context, info models.NodeInfo, event NodeEvent) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleNodeEvent", ctx, info, event)
}

// HandleNodeEvent indicates an expected call of HandleNodeEvent.
func (mr *MockNodeEventHandlerMockRecorder) HandleNodeEvent(ctx, info, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleNodeEvent", reflect.TypeOf((*MockNodeEventHandler)(nil).HandleNodeEvent), ctx, info, event)
}
